name: Release Windows Asset

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v0.9.0). If empty, and workflow runs on a tag, it will auto-detect."
        required: false
        type: string
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          # Use the Go version from go.mod for better compatibility
          go-version-file: 'go.mod'

      - name: Resolve tag
        id: resolve_tag
        shell: pwsh
        run: |
          $tag = "${{ inputs.tag }}"
          if ([string]::IsNullOrWhiteSpace($tag)) {
            if ($env:GITHUB_REF -like 'refs/tags/*') {
              $tag = $env:GITHUB_REF.Substring(10)
            }
          }
          if ([string]::IsNullOrWhiteSpace($tag)) {
            Write-Error "tag not provided and not running on a tag."
            exit 1
          }
          Write-Host "Resolved tag=$tag"
          "tag=$tag" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~\go\pkg\mod
            ~\AppData\Local\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Generate Windows Version Info (.syso)
        shell: pwsh
        run: |
          go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@latest
          $tag = "${{ steps.resolve_tag.outputs.tag }}"
          if ([string]::IsNullOrWhiteSpace($tag)) { throw "Tag not resolved" }
          $ver = $tag.TrimStart('v')
          # Ensure four-part version (x.y.z.w)
          if (($ver.Split('.').Length) -lt 4) { $ver = $ver + ".0" }
          $jsonPath = "versioninfo.json"
          if (Test-Path $jsonPath) {
            $json = Get-Content $jsonPath -Raw | ConvertFrom-Json
            $parts = $ver.Split('.')
            $json.FixedFileInfo.FileVersion.Major = [int]$parts[0]
            $json.FixedFileInfo.FileVersion.Minor = [int]$parts[1]
            $json.FixedFileInfo.FileVersion.Patch = [int]$parts[2]
            $json.FixedFileInfo.FileVersion.Build = [int]$parts[3]
            $json.FixedFileInfo.ProductVersion.Major = [int]$parts[0]
            $json.FixedFileInfo.ProductVersion.Minor = [int]$parts[1]
            $json.FixedFileInfo.ProductVersion.Patch = [int]$parts[2]
            $json.FixedFileInfo.ProductVersion.Build = [int]$parts[3]
            $json.StringFileInfo.FileVersion = "$ver"
            $json.StringFileInfo.ProductVersion = "$ver"
            $json | ConvertTo-Json -Depth 10 | Set-Content -Encoding UTF8 $jsonPath
            goversioninfo -platform-specific -o resource.syso -manifest= -64 $jsonPath
          } else {
            goversioninfo -platform-specific -o resource.syso -manifest= -64 -file-version $ver -product-version $ver
          }

      - name: Build Windows EXE
        shell: pwsh
        run: |
          go env
          go build -o build\godash.exe .

      - name: Code Sign EXE (if certificate provided)
        shell: pwsh
        env:
          WINDOWS_CERT_PFX_B64: ${{ secrets.WINDOWS_CERT_PFX_B64 }}
          WINDOWS_CERT_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD }}
        run: |
          $pfx = $env:WINDOWS_CERT_PFX_B64
          $pwd = $env:WINDOWS_CERT_PASSWORD
          $hasPfx = -not [string]::IsNullOrWhiteSpace($pfx)
          $hasPwd = -not [string]::IsNullOrWhiteSpace($pwd)
          if (-not ($hasPfx -and $hasPwd)) {
            Write-Host "Skipping codesign: certificate secrets not provided."
            exit 0
          }
          Write-Host "Code signing build\godash.exe"
          $pfxPath = "$env:RUNNER_TEMP\codesign.pfx"
          [IO.File]::WriteAllBytes($pfxPath, [Convert]::FromBase64String($pfx))
          & signtool sign /f $pfxPath /p $pwd /fd SHA256 /td SHA256 /tr http://timestamp.digicert.com build\godash.exe
          if ($LASTEXITCODE -ne 0) { throw "signtool failed with exit code $LASTEXITCODE" }

      - name: Verify Signature (if signed)
        shell: pwsh
        run: |
          try {
            & signtool verify /pa /v build\godash.exe
          } catch {
            Write-Host "Signature not present or verification failed; skipping."
          }

      - name: Create README for ZIP
        shell: pwsh
        run: |
          $tag = "${{ steps.resolve_tag.outputs.tag }}"
          $content = @"
          GoDash $tag (Windows)

          1) Unzip
          2) Run godash.exe
          3) Open http://127.0.0.1:8080/ if the browser doesn't auto-open

          Notes:
          - Uses SQLite by default
          - Set APP_KIOSK=1 to open in kiosk/app window (Windows)
          "@
          New-Item -ItemType Directory -Force -Path release | Out-Null
          Set-Content -Path release\README-WINDOWS.txt -Value $content -Encoding UTF8

      - name: Package ZIP
        shell: pwsh
        run: |
          $tag = "${{ steps.resolve_tag.outputs.tag }}"
          $zip = "godash-$tag-windows-x64.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path build\godash.exe, release\README-WINDOWS.txt -DestinationPath $zip
          Write-Host "Created $zip"

      - name: Generate SHA256 checksum
        shell: pwsh
        run: |
          $tag = "${{ steps.resolve_tag.outputs.tag }}"
          $zip = "godash-$tag-windows-x64.zip"
          $hash = Get-FileHash $zip -Algorithm SHA256
          $out = "$($hash.Hash)  $zip"
          Set-Content -Path "$zip.sha256.txt" -Value $out -Encoding ASCII
          Write-Host "SHA256: $out"

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          # softprops/action-gh-release uses GITHUB_TOKEN from env
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ steps.resolve_tag.outputs.tag }}
          files: |
            godash-${{ steps.resolve_tag.outputs.tag }}-windows-x64.zip
            godash-${{ steps.resolve_tag.outputs.tag }}-windows-x64.zip.sha256.txt
          draft: false
          prerelease: false
