services:
  # Main GoDash application
  godash:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: godash-monitor
    ports:
      - "8080:8080"
    environment:
      # Server configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - SERVER_MODE=release
      
      # Database configuration
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=godash
      - DB_PASSWORD=secure_password_123
      - DB_NAME=godash
      - DB_SSL_MODE=disable
      - DB_MAX_OPEN_CONNS=25
      - DB_MAX_IDLE_CONNS=5
      
      # Metrics configuration
      - METRICS_COLLECTION_INTERVAL=30s
      - METRICS_RETENTION_DAYS=30
      - METRICS_ENABLE_CPU=true
      - METRICS_ENABLE_MEMORY=true
      - METRICS_ENABLE_DISK=true
      - METRICS_ENABLE_NETWORK=true
      - METRICS_ENABLE_PROCESSES=true
      
      # Alert system configuration
      - ALERTS_ENABLE=true
      - ALERTS_CHECK_INTERVAL=30s
      - ALERTS_COOLDOWN_PERIOD=5m
      
      # Email configuration (disabled by default)
      - EMAIL_ENABLED=false
      - EMAIL_SMTP_HOST=
      - EMAIL_SMTP_PORT=587
      - EMAIL_SMTP_USERNAME=
      - EMAIL_SMTP_PASSWORD=
      - EMAIL_FROM_EMAIL=
      - EMAIL_FROM_NAME=GoDash Monitor
      - EMAIL_USE_TLS=true
      
      # Webhook configuration
      - WEBHOOK_TIMEOUT=10s
      - WEBHOOK_MAX_RETRIES=3
      - WEBHOOK_RETRY_DELAY=2s
      
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - godash-network
    volumes:
      - godash-logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.godash.rule=Host(`godash.localhost`)"
      - "traefik.http.services.godash.loadbalancer.server.port=8080"

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: godash-postgres
    environment:
      - POSTGRES_DB=godash
      - POSTGRES_USER=godash
      - POSTGRES_PASSWORD=secure_password_123
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5433:5432"  # External access for development
    restart: unless-stopped
    networks:
      - godash-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U godash -d godash"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: godash-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - godash-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # NGINX reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: godash-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - godash-logs:/var/log/nginx
    depends_on:
      - godash
    restart: unless-stopped
    networks:
      - godash-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  godash-logs:
    driver: local

# Custom network
networks:
  godash-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16